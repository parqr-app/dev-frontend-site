{"version":3,"file":"component---src-pages-meter-lot-lot-name-spot-spot-name-index-js-9019c646df3dafa8f6ba.js","mappings":"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","sources":["webpack://par-qr-app/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://par-qr-app/./src/components/meter/CheckoutForm.js","webpack://par-qr-app/./src/components/meter/add-time.js","webpack://par-qr-app/./src/components/meter/parking-meter.js","webpack://par-qr-app/./src/pages/meter/lot/[lotName]/spot/[spotName]/index.js","webpack://par-qr-app/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React from 'react';\nimport '../../css/main.css';\nimport moment from 'moment';\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js';\n\nconst queryService = process.env.GATSBY_BE_URL;\n\nconst CARD_ELEMENT_OPTIONS = {\n    style: {\n        base: {\n            color: \"#32325d\",\n            fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n            fontSmoothing: \"antialiased\",\n            fontSize: \"16px\",\n            \"::placeholder\": {\n                color: \"#aab7c4\",\n            },\n        },\n        invalid: {\n            color: \"#fa755a\",\n            iconColor: \"#fa755a\",\n        },\n    },\n}\n\nfunction CardSection() {\n    return <label>\n        Card Details\n        <CardElement options={CARD_ELEMENT_OPTIONS} />\n\n    </label>\n}\n\nexport default function CheckoutForm(props) {\n    const stripe = useStripe();\n    const elements = useElements();\n\n    const handleSubmit = async (event) => {\n        // We don't want to let default form submission happen here,\n        // which would refresh the page.\n        event.preventDefault();\n\n        if (!stripe || !elements) {\n            // Stripe.js has not yet loaded.\n            // Make sure to disable form submission until Stripe.js has loaded.\n            return;\n        }\n\n        const startPayment = `mutation startPayment($amount: Int!, $spotName: ID!, $lotName: ID!){\n            startPayment(input: {amount: $amount, spot: {spotName: $spotName, lotName: $lotName}} ) {\n                success\n                message\n                secret\n            }\n        }`;\n\n        const completePayment = `mutation completePayment($transactionId: String!){\n            completePayment(input: {transactionId: $transactionId}) {\n                success\n                message\n            }\n        }`\n\n        var secret = \"\";\n\n        const fetchResponse = fetch(queryService, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n            body: JSON.stringify({\n                query: startPayment,\n                variables: { amount: Math.round(props.amount), spotName: props.spotName, lotName: props.lotName },\n            })\n        }).then(r => r.json()).then(data => {\n            let res = data.data.startPayment;\n            if (res.success == true) {\n                secret = res.secret;\n            } else {\n                console.log(res.message);\n            }\n        });\n\n        await fetchResponse;\n        console.log(secret);\n        if (secret === \"\") {\n            return;\n        }\n\n        const result = await stripe.confirmCardPayment(secret, {\n            payment_method: {\n                card: elements.getElement(CardElement),\n            }\n        });\n\n        if (result.error) {\n            // Show error to your customer (e.g., insufficient funds)\n            console.log(result.error.message);\n        } else {\n            // The payment has been processed!\n            if (result.paymentIntent.status === 'succeeded') {\n                console.log(\"Payment Success\");\n                const fetchResponse = fetch(queryService, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json',\n                    },\n                    body: JSON.stringify({\n                        query: completePayment,\n                        variables: { transactionId: result.paymentIntent.id },\n                    })\n                }).then(r => r.json()).then(data => {\n                    let res = data.data.completePayment;\n                    if (res.success == true) {\n                        console.log(\"Lot time update success\");\n                        props.onPayment();\n                    } else {\n                        console.log(res.message);\n                    }\n                });\n                // Show a success message to your customer\n                // There's a risk of the customer closing the window before callback\n                // execution. Set up a webhook or plugin to listen for the\n                // payment_intent.succeeded event that handles any business critical\n                // post-payment actions.\n            }\n        }\n    };\n\n    return (\n        // TODO: disable while transacting\n        <form onSubmit={handleSubmit}>\n            <CardSection />\n            <button disabled={!stripe}>Confirm Payment</button>\n        </form>\n    );\n}","import React from 'react';\nimport moment from 'moment';\nimport '../../css/main.css';\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport CheckoutForm from './CheckoutForm.js';\n\n// max time that can be added to the meter in minutes\nconst maxAddedTime = 360;\n\nconst stripePromise = loadStripe(\"pk_test_51JZT7fLBm4Ihz0NC9q5UNwoiPHEXAVSI1BqpVSOmlKgiquacCqKcpEV888D0RJU88AjGzO0lP9tC7lOKfInIVOQE00vFS4dAz5\");\n\nclass AddTime extends React.Component {\n    constructor(props) {\n        super(props);\n        this.resetState = this.resetState.bind(this);\n        this.confirm = this.confirm.bind(this);\n        this.incrementTime = this.incrementTime.bind(this);\n        this.decrementTime = this.decrementTime.bind(this);\n        this.onUpdate = this.props.onUpdate.bind(this);\n\n        this.state = {\n            totalCost: 0.0, newExpiry: this.props.expiry.clone(),\n            additionalDuration: moment.duration(0),\n            decrementButton: (<button disabled>-</button>),\n            incrementButton: <button onClick={this.incrementTime}>+</button>,\n            paying: false\n        };\n        this.priceIncrement = Math.round(this.props.rate * (this.props.addTime.asMinutes() / 60));\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (moment.duration(props.expiry.diff(moment())) > 0 && state.additionalDuration <= 0) {\n            return { newExpiry: props.expiry.clone() };\n        } else if (moment.duration(state.newExpiry.diff(moment())) < 0) {\n            return { newExpiry: moment() };\n        } else {\n            return null;\n        }\n    }\n\n    componentDidUpdate() {\n        this.priceIncrement = Math.round(this.props.rate * (this.props.addTime.asMinutes() / 60));\n    }\n\n    resetState() {\n        this.onUpdate();\n        this.setState({\n            totalCost: 0.0,\n            newExpiry: this.props.expiry,\n            additionalDuration: moment.duration(0),\n            decrementButton: (<button disabled>-</button>),\n            incrementButton: <button onClick={this.incrementTime}>+</button>,\n            paying: false\n        });\n    }\n\n    incrementTime() {\n        this.setState({\n            totalCost: this.state.totalCost + this.priceIncrement,\n            newExpiry: this.state.newExpiry.clone().add(this.props.addTime),\n            additionalDuration: this.state.additionalDuration.add(this.props.addTime),\n            decrementButton: <button onClick={this.decrementTime}>-</button>\n        });\n\n        if (moment.duration(this.state.newExpiry.diff(moment())).asMinutes() >= maxAddedTime) {\n            this.setState({ incrementButton: <button disabled>+</button> });\n        }\n    }\n\n    decrementTime() {\n        if (this.state.additionalDuration.asMinutes() > 0) {\n            this.setState({\n                totalCost: this.state.totalCost - this.priceIncrement,\n                newExpiry: this.state.newExpiry.subtract(this.props.addTime),\n                additionalDuration: this.state.additionalDuration.subtract(this.props.addTime),\n                incrementButton: <button onClick={this.incrementTime}>+</button>\n            });\n        }\n        if (this.state.additionalDuration.asMinutes() <= 0) {\n            this.setState({ decrementButton: <button disabled>-</button> });\n        }\n    }\n\n    confirm() {\n        // show checkout form\n        this.setState({\n            paying: true\n        });\n    }\n\n    render() {\n        if (this.state.paying) {\n            return (\n                <Elements stripe={stripePromise}>\n                    <CheckoutForm amount={this.state.totalCost}\n                        spotName={this.props.spotName}\n                        lotName={this.props.lotName}\n                        onPayment={this.resetState}\n                    />\n                </Elements>\n            );\n        } else {\n            return (\n                <div>\n                    <section className=\"add-time\">\n                        <div className=\"container\">\n                            <div className=\"incrementor\">\n                                <div className=\"subtract-button\">\n                                    {this.state.decrementButton}\n                                </div>\n                                <div className=\"subtotal\">\n                                    <div className=\"countdown-display\">\n                                        <span>{this.state.additionalDuration.asMinutes()} minutes</span>\n                                    </div>\n                                    <div className=\"expiry-display\">\n                                        <span>Expires {this.state.newExpiry.format(\"HH:mm\")}</span>\n                                    </div>\n                                </div>\n                                <div className=\"add-button\">\n                                    {this.state.incrementButton}\n                                </div>\n                            </div>\n                            <div className=\"confirm-button\">\n                                <button onClick={this.confirm}>\n                                    <div className=\"confirm-price\">\n                                        ${this.state.totalCost / 100}\n                                    </div>\n                                    <div className=\"confirm-message\">\n                                        Tap to Confirm\n                                    </div>\n                                </button>\n                            </div>\n                        </div>\n                    </section>\n                </div >\n            );\n        }\n\n    }\n}\n\nexport { AddTime }","import React from 'react';\nimport moment from 'moment';\nimport '../../css/main.css';\n\nclass ParkingMeter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.tick = this.tick.bind(this);\n        this.state = { remainingTime: moment.duration(this.props.expiry.diff(moment())) };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        return { remainingTime: moment.duration(props.expiry.diff(moment())) };\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        if (this.state.remainingTime > 0) {\n            this.setState({\n                remainingTime: moment.duration(this.props.expiry.diff(moment()))\n            });\n        }\n    }\n\n    getHourString(){\n        if (this.state.remainingTime.get('hours') < 10){\n            return \"0\"+this.state.remainingTime.get('hours');\n        }\n        return this.state.remainingTime.get('hours');\n    }\n\n    getMinuteString(){\n        if (this.state.remainingTime.get('minutes') < 10){\n            return \"0\"+this.state.remainingTime.get('minutes');\n        }\n        return this.state.remainingTime.get('minutes');\n    }\n\n    getSecondString(){\n        if (this.state.remainingTime.get('seconds') < 10){\n            return \"0\"+this.state.remainingTime.get('seconds');\n        }\n        return this.state.remainingTime.get('seconds');\n    }\n\n    strSpace(i){\n        return Array(i).fill('\\xa0').join('')\n    }\n\n    render() {\n\n        if (this.state.remainingTime > 0) {\n            return (\n                <section className=\"parking-meter\">\n                    <div className=\"container\">\n                        <div className=\"remaining-time\">\n                            Time Remaining\n                        </div>\n                        <div className=\"remaining-time-countdown\">\n                        {this.getHourString()} {this.strSpace(2)} {this.getMinuteString()} {this.strSpace(2)}  {this.getSecondString()} \n                        </div>\n                        <div className=\"hr-min-s\">\n                            {this.strSpace(2)} hours {this.strSpace(14)} minutes {this.strSpace(11)} seconds{this.strSpace(1)} \n                        </div>\n                        <div className=\"remaining-time-expiry\">\n                            Expires {this.props.expiry.format(\"HH:mm\")}\n                        </div>\n                        <div className=\"spot-info\">\n                            <div className=\"lot-id\">Lot ID: {this.props.lotName}</div>\n                            <div className=\"spot-id\">Spot ID: {this.props.spotName}</div>\n                        </div>\n                    </div>\n                </section>\n            );\n        } else {\n            return (\n                <section className=\"parking-meter\">\n                    <div className=\"container\">\n                        <div className=\"remaining-time-expired\">\n                            Time Remaining\n                        </div>\n                        <div className=\"remaining-time-countdown-expired\">\n                        {\"00\"} {this.strSpace(2)} {\"00\"} {this.strSpace(2)}  {\"00\"} \n                        </div>\n                        <div className=\"hr-min-s-expired\">\n                        {this.strSpace(2)} hours {this.strSpace(14)} minutes {this.strSpace(11)} seconds{this.strSpace(1)} \n                        </div>\n                        <div className=\"remaining-time-expiry-expired\">\n                            EXPIRED\n                        </div>\n                        <div className=\"spot-info\">\n                            <div className=\"lot-id\">Lot ID: {this.props.lotName}</div>\n                            <div className=\"spot-id\">Spot ID: {this.props.spotName}</div>\n                        </div>\n                    </div>\n                </section>\n            );\n        }\n\n    }\n\n}\n\nexport { ParkingMeter }","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n// TODO: better relative imports\nimport { Header } from '../../../../../../components/common/header.js';\nimport { AddTime } from '../../../../../../components/meter/add-time.js';\nimport { ParkingMeter } from '../../../../../../components/meter/parking-meter.js';\nimport '../../../../../../css/main.css';\n\n// Stripe\nimport { Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\n// import PayButton from '../../../../../../components/payment/PayButton.js';\n\nconst stripePromise = loadStripe('pk_test_51JZT7fLBm4Ihz0NC9q5UNwoiPHEXAVSI1BqpVSOmlKgiquacCqKcpEV888D0RJU88AjGzO0lP9tC7lOKfInIVOQE00vFS4dAz5');\n\nconst queryService = process.env.GATSBY_BE_URL;\n\nconst SpotPage = (props) => {\n\n    const { lotName, spotName } = props.params;\n    // query vals\n    const [addTime, setAddTime] = useState(moment.duration(0));\n    const [rate, setRate] = useState(0);\n    const [lastLoad, setLastLoad] = useState(moment());\n    const [expiry, setExpiry] = useState(moment());\n\n    // computed vals\n    const spotQuery = `query spotQuery($lotName: ID!, $spotName: ID!) {\n        spot(input: {lotName: $lotName, spotName: $spotName}) {\n            endTime\n            lot {\n                rate\n                timeUnit\n                minCost\n            }\n        }\n    }`;\n\n    // sets initial state on page load or after success\n    useEffect(() => {\n        return fetch(queryService, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n            body: JSON.stringify({\n                query: spotQuery,\n                variables: { lotName: lotName, spotName: spotName },\n            })\n        })\n            .then(r => r.json())\n            .then(data => {\n                setRate(data.data.spot.lot.rate);\n                setAddTime(moment.duration(data.data.spot.lot.timeUnit, 'minutes'));\n                setExpiry(moment(data.data.spot.endTime));\n            })\n    }, [lastLoad])\n\n\n    return (\n        <Elements stripe={stripePromise}>\n            <Header />\n            <ParkingMeter\n                lotName={props.lotName}\n                spotName={props.spotName}\n                expiry={expiry}\n            />\n            <AddTime\n                lotName={props.lotName}\n                spotName={props.spotName}\n                rate={rate}\n                addTime={addTime}\n                expiry={expiry}\n                onUpdate={() => { setLastLoad(moment()) }}\n            />\n        </Elements>\n    );\n}\n\nexport default SpotPage;\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","queryService","process","CARD_ELEMENT_OPTIONS","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","CardSection","CardElement","options","CheckoutForm","props","stripe","useStripe","elements","useElements","handleSubmit","fn","event","preventDefault","completePayment","secret","fetchResponse","fetch","method","headers","body","JSON","stringify","query","variables","amount","Math","round","spotName","lotName","r","json","data","res","startPayment","success","console","log","message","confirmCardPayment","payment_method","card","getElement","result","paymentIntent","status","transactionId","id","onPayment","self","this","args","arguments","apply","err","undefined","onSubmit","disabled","stripePromise","loadStripe","AddTime","resetState","bind","confirm","incrementTime","decrementTime","onUpdate","state","totalCost","newExpiry","expiry","clone","additionalDuration","moment","decrementButton","incrementButton","onClick","paying","priceIncrement","rate","addTime","asMinutes","getDerivedStateFromProps","diff","componentDidUpdate","setState","add","subtract","render","Elements","className","format","React","ParkingMeter","tick","remainingTime","componentDidMount","timerID","setInterval","componentWillUnmount","clearInterval","getHourString","get","getMinuteString","getSecondString","strSpace","i","Array","fill","join","params","useState","setAddTime","setRate","lastLoad","setLastLoad","setExpiry","useEffect","spot","lot","timeUnit","endTime","_assertThisInitialized","ReferenceError"],"sourceRoot":""}